{"version":3,"sources":["logo.svg","actions/index.js","App.js","serviceWorker.js","reducers/counter.js","reducers/isloggedin.js","reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","increment","data","type","payload","decrement","library","add","fab","faUserSecret","faCheckSquare","App","counter","useSelector","state","isloggedin","dispatch","useDispatch","react_default","a","createElement","className","method","noValidate","autoComplete","style","marginTop","tabIndex","paddingTop","required","width","height","onClick","Boolean","window","location","hostname","match","arguments","length","undefined","action","isloggedinReducer","allreducers","combineReducers","counterReducer","store","createStore","allReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8737e7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export const increment = (data) =>{\r\n\treturn{\r\n\t\ttype: 'INCREMENT',\r\n\t\tpayload:data\r\n\t};\r\n}\r\n\r\nexport const decrement = ()=>{\r\n\treturn{\r\n\t\ttype: 'DECREMENT'\r\n\t}\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faCheckSquare, faCoffee, faUserSecret} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../node_modules/font-awesome/css/font-awesome.css';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {increment} from './actions';\r\nimport {decrement} from './actions';\r\nlibrary.add(fab, faUserSecret, faCheckSquare);\r\n\r\n\r\n\r\nfunction App() {\r\n  const counter = useSelector(state=>state.counter);\r\n  const isloggedin = useSelector(state=>state.isloggedin);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"content\">\r\n  <div className=\"container\">\r\n      <div className=\"col-md-6 col-md-4 ml-auto mr-auto\">\r\n        <form className=\"form login-form\" method=\"POST\"  noValidate autoComplete=\"off\">\r\n          <div className=\"card card-login\">\r\n            <div className=\"card-header text-center\">\r\n              <label className=\"form-label\">\r\n              LOGIN {counter}\r\n              </label>\r\n              <label className=\"form-label\">\r\n              LOGIN {isloggedin ? 'Logged-In':'Please Login'}\r\n              </label>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"form-group\" style={{marginTop: '2%'}}>\r\n                <label className=\"form-label\">User ID:</label>\r\n                <div className=\"row form-input-row\" tabIndex=\"1\">\r\n                  <div className=\"col-md-1 no-padding text-center\">\r\n                    <i className=\"fa fas fa-user-secret\" style={{paddingTop: '40%'}}></i>\r\n                  </div>\r\n                  <div className=\"col-md-11 no-padding\">\r\n                    <input type=\"text\" className=\"form-control no-border no-padding\" required />\r\n                    <div>\r\n                      <div>\r\n                      <i className=\"fa fas fa-frown-o\"></i>\r\n                      <label className=\"form-error\">Password is required!</label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\" style={{marginTop: '6%'}}>\r\n                <label className=\"form-label\" >Password:</label>\r\n                <div className=\"row form-input-row\" tabIndex=\"1\">\r\n                  <div className=\"col-md-1 no-padding text-center\">\r\n                    <i className=\"fa fas fa-key\" style={{paddingTop: '40%'}}></i>\r\n                  </div>\r\n                  <div className=\"col-md-10 no-padding\">\r\n                    <input className=\"form-control no-border no-padding\"  required />\r\n                    \r\n                    <div>\r\n                      <div>\r\n                      <i className=\"fa fas fa-frown-o pt-3\"></i>\r\n                      <label className=\"form-error\">Password is required!</label>\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-1 no-padding\">\r\n                    <button  type=\"button\" className=\"btn float-right no-padding\" style={{width: '100%',height: '100%'}}>\r\n                    <i className=\"fa fa-eye\"></i>\r\n                    </button>\r\n                  </div>\r\n                  \r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n              <button onClick={()=>dispatch(increment(5))} type=\"button\" className=\"btn btn-primary float-left\">Forgot Password</button>\r\n              <button onClick={()=> dispatch(decrement())}type=\"button\" className=\"btn btn-primary float-right\">Login</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div> \r\n  </div>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const counter = (state=0,action) =>{\r\n\tswitch(action.type){\r\n\tcase 'INCREMENT':\r\n\t\t\t\t\t return state + action.payload;\r\n\tcase 'DECREMENT':\r\n\t\t\t\t\t return state - 1;\r\n\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default counter;","const isloggedinReducer = (state=false,action) =>{\r\n\tswitch(action.type){\r\n\t\tcase 'login': return !state;\r\n\t\tdefault : return !state;\r\n\t}\r\n}\r\n\r\nexport default isloggedinReducer;","import counterReducer from './counter';\r\nimport isloggedinReducer from './isloggedin';\r\n\r\n\r\nimport {combineReducers} from 'redux';\r\n\r\n\r\n\r\nconst allreducers = combineReducers({\r\n\tcounter :counterReducer,\r\n\tisloggedin:isloggedinReducer\r\n});\r\n\r\nexport default allreducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport  '../node_modules/font-awesome/css/font-awesome.css';\r\nimport {createStore} from 'redux';\r\nimport  allReducers from './reducers';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\n//STATE -> TO save your complete  keep your global Data\r\n//\r\n\r\n//Action->\r\n\r\nconst store = createStore(allReducers,\r\n\t  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n    <App />\r\n  </Provider>, \r\n\tdocument.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}